'''
什么是对象的成员？
一个对象通过实例化之后，那么在类中定义的属性和方法，可以使用实例化的对象进行操作
类中定义的属性也称为 成员属性，类中定义的方法，也称为成员方法
'''

class Cart():
    color='白色'
    brand='艾迪'
    pailiang=2.4


    def lahuo(self):
        print('小汽车能拉货')

    def doufeng(self):
        print('小汽车能兜风')

    def bamei(self):
        print('带妹子去嗨')


# 实例化对象
a=Cart() # <__main__.Cart object at 0x0000021A20C779D0>
b=Cart() # <__main__.Cart object at 0x00000266BC20BB80>

'''
一个类可以实例化多个对象
以上的a和b变量都是对象，也都是通过Cart这个类实例化出来的对象，
但是a和b是两个对象，相同之处就在于都是同一个类实例化出来的
'''

# 对象的成员的操作
# 1.在类的外部，使用对象操作成员
# 访问成员属性：先访问对象自己的color属性，没有，就去访问这个对象的类的属性

# res=a.color  #通过对象访问类中的属性
# a.color='黑色'  #修改对象的属性  实际上等于给这个对象创建了一个a对象自己的color属性
# a.name='A6' #给对象添加属性  此时name属性只属于当前a这个对象
# 此时b对象中的color属性是什么
# b中color依然是白色 a和b是两个不同的对象
# res=a.lahuo() #通过对象访问类中方法

# del a.brand  #AttributeError: brand 删除失败
# del a.name
# del a.color  #删除成功
# 思考一个问题：brand属性不能删除，但是name属性可以删除，为什么？

'''
删除一个对象的属性时，只能删除当前这个对象自己的属性才可以
上面例子中的brand属性并不是a对象自己的属性，而是属性Cart这个类。因此不能删除
而name这个属性，是单独给a对象添加的属性，因此可以删除
'''

# 2.在类的外部，操作对象的方法
# 访问对象的方法：实际上如果这个对象没有自己独立的方法，那么就会访问到这个对象的方法
# res=a.lahuo() 通过对象访问类中方法

# 修改对象的方法：给这个对象的方法重新定义
def func():
    print('这是一个新的方法')

a.lahuo=func  #把一个函数赋值给成员  # 直接用func不带括号就是说是函数对象
# a.lahuo() 调用这个方法

# 添加新的方法：给这个对象自己新创建的方法
a.fun2=func
# a.fun2()

# 删除方法   可以删除这个对象自己的方法   # 删除的是函数对象 这里不带括号是当
# del a.fun2  #可以删除
# del a.bamei #不可以删除这个对象的类的方法

# 总结
'''
一个类定义成员属性和成员方法，那么通过这个类实例化的对象，也具备这些方法和属性吗？
    实际上，创建对象的时候，并不会把类中的属性和方法赋值一份给对象，而是在对象中引用父类的方法
    因此在访问对象和属性时，会先去找对象自己的属性，如果没有就去找这个类的属性和方法
    
一个对象有类创建以后，是一个独立的对象，会引用父类中的属性和方法
如果在对象创建后，给对象的属性或方法，进行修改或添加，那么此时等于给这个对象创建了一个自己的属性和方法
所以在删除时，只能删除对象被修改或添加的成员
'''


